
name: ci-build

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

defaults:
  run:
    shell: bash

env:
  PYTHONUNBUFFERED: 1

jobs:
  build-stage-1:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    outputs:
      VERSION:

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          echo PYTHONUNBUFFERED: $PYTHONUNBUFFERED
          python -m pip install --upgrade pip setuptools wheel
          python -m pip install --upgrade -r requirements.txt

      - name: Run the build script
        id: runbuild
        shell: bash
        run: |
            VERSION=$(invoke version)
            echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
            echo "Building $VERSION"
            invoke build
            ls -al dist

      - name: Check output
        shell: bash
        run: |
          echo "Do we get the output value here? --> ${{ steps.runbuild.outputs.VERSION }}"
          echo "What about here --> $VERSION"

      - name: Save workflow artifact
        uses: actions/upload-artifact@v3
        with:
          name: build-stage1
          path: dist/my-build1-${{ steps.runbuild.outputs.VERSION }}.txt





  build-stage-2:
    needs: build-stage-1
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.9', '3.10', '3.11']
        architecture: ['x86', 'x64']
        # Exclude x86 configs on non-Windows OSs
        exclude:
          - os: ubuntu-latest
            architecture: x86
          - os: macos-latest
            architecture: x86

    runs-on: ${{ matrix.os }}

    outputs:
      short_name: ${{ steps.init.outputs.short_name }}
      cannonical_id: ${{ steps.init.outputs.cannonical_id }}

    steps:
      - name: initialize variables
        id: init
        run: |
          if [ ${{ matrix.os }} == ubuntu-latest ]; then
              short_name=linux
          elif [ ${{ matrix.os }} == macos-latest ]; then
              short_name=macos
          elif [ ${{ matrix.os }} == windows-latest ]; then
              if ${{ matrix.architecture }} == x64 ]; then
                  short_name=win64
              else
                  short_name=win32
              fi
          fi
          echo "short_name=$short_name" >> "$GITHUB_OUTPUT"
          echo "cannonical_id=$short_name-py${{ matrix.python-version }}-${{ matrix.architecture}}" >> "$GITHUB_OUTPUT"

          echo short_name: $short_name


      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: 'recursive'

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          architecture: ${{ matrix.architecture }}
          cache: 'pip'

      - name: Install dependencies
        shell: bash
        run: |
          python -m pip install --upgrade pip setuptools wheel
          python -m pip install --upgrade -r requirements.txt

      - name: download stage1 artifact
        uses: actions/download-artifact@v3
        with:
          name: build-stage1
          path: dist

      # - name: Check workspace
      #   shell: bash
      #   run: |
      #     echo "Workspace: " $PWD
      #     ls -al dist

      - name: build stage2
        shell: bash
        run: |
          invoke build2 ${{ matrix.os }} ${{ matrix.python-version }} ${{ matrix.architecture}}

      # # upload using the same artifact on all instances to test adding them all to one archive
      # - name: upload stage2 artifact
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: build-stage2
      #     path: dist/my-build2-*.txt

      # Separate artifacts, and only for some platforms
      - name: upload stage2 artifact
        uses: actions/upload-artifact@v3
        if: ${{ matrix.os != 'ubuntu-latest' }}
        with:
          name: build-stage2-${{ steps.init.outputs.cannonical_id }}
          path: dist/my-build2-*.txt
